/**
 * ArtQuiz Backend definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Score } from '../models/score';
import { environment } from 'src/environments/environment';


@Injectable()
export class ScoreService {

    public defaultHeaders = new HttpHeaders();

    constructor(protected httpClient: HttpClient) {
    }


    /**
     * 
     * get last X best player scores
     * @param limit the number of scores to get
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getBestScores(limit?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Score>>;
    public getBestScores(limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Score>>>;
    public getBestScores(limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Score>>>;
    public getBestScores(limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams();
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        return this.httpClient.request<Array<Score>>('get',`${environment.serverBaseURL}/api/score/best`,
            {
                params: queryParameters,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
