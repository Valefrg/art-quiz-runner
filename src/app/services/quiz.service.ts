/**
 * ArtQuiz Backend definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PlayerAnswer } from '../models/playerAnswer';
import { QuizState } from '../models/quizState';
import { environment } from 'src/environments/environment';
import { ConnectionService } from './connection.service';
import { IQuizService } from './quiz.interface';


@Injectable()
export class QuizService extends IQuizService {

    public defaultHeaders = new HttpHeaders();
    private isOnline = environment.defaultConnectionIsOnline;

    constructor(protected httpClient: HttpClient, private connectionService: ConnectionService) {
      super();
      this.connectionService.connectEvent.subscribe((isOnline) => {
        this.isOnline = isOnline;
      })
    }


    /**
     * 
     * Get initial quiz state
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public getInitialQuizState(username?: string, observe?: 'body', reportProgress?: boolean): Observable<QuizState>;
     public getInitialQuizState(username?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuizState>>;
     public getInitialQuizState(username?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuizState>>;
     public getInitialQuizState(username?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

      let headers = this.defaultHeaders;

      let queryParameters = new HttpParams();
      if (username !== undefined && username !== null) {
          queryParameters = queryParameters.set('username', <any>username);
      }

      return this.httpClient.request<QuizState>('get',`${environment.serverBaseURL}/api/player/quiz/state`,
          {
              params: queryParameters,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
    }

    /**
     * 
     * Send the curent player choice
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public handlePlayerChoice(body?: PlayerAnswer, observe?: 'body', reportProgress?: boolean): Observable<QuizState>;
    public handlePlayerChoice(body?: PlayerAnswer, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuizState>>;
    public handlePlayerChoice(body?: PlayerAnswer, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuizState>>;
    public handlePlayerChoice(body?: PlayerAnswer, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

      let headers = this.defaultHeaders;


      return this.httpClient.request<QuizState>('post',`${environment.serverBaseURL}/api/player/quiz/answer`,
          {
              body: body,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
    }

}
