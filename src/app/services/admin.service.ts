/**
 * ArtQuiz Backend definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Injectable,}                      from '@angular/core';
import { HttpClient, HttpHeaders,
         HttpResponse, HttpEvent }                           from '@angular/common/http';

import { Observable }                                        from 'rxjs';
import { QuestionFull } from '../models/questionFull';
import { environment } from 'src/environments/environment';
import { ConnectionService } from './connection.service';
import { IAdminService } from './admin.interface';


@Injectable()
export class AdminService extends IAdminService {

    public defaultHeaders = new HttpHeaders();

    constructor(protected httpClient: HttpClient, private connectionService: ConnectionService) {
        super();
    }


    /**
     * 
     * Send a new question available in game
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addQuestion(body?: QuestionFull, observe?: 'body', reportProgress?: boolean): Observable<QuestionFull>;
    public addQuestion(body?: QuestionFull, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionFull>>;
    public addQuestion(body?: QuestionFull, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionFull>>;
    public addQuestion(body?: QuestionFull, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;
        headers = headers.append('Authorization', localStorage.getItem('adminPass'));

        return this.httpClient.request<QuestionFull>('post',`${environment.serverBaseURL}/api/admin/question`,
            {
                body: body,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Delete question identified by given ID
     * @param id The comment that needs to be fetched.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
     public deleteQuestionById(id: number, observe?: 'body', reportProgress?: boolean): Observable<QuestionFull>;
     public deleteQuestionById(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionFull>>;
     public deleteQuestionById(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionFull>>;
     public deleteQuestionById(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         if (id === null || id === undefined) {
             throw new Error('Required parameter id was null or undefined when calling deleteQuestionById.');
         }
 
         let headers = this.defaultHeaders;
         headers = headers.append('Authorization', localStorage.getItem('adminPass'));
 
 
         return this.httpClient.request<QuestionFull>('delete',`${environment.serverBaseURL}/api/admin/question/${encodeURIComponent(String(id))}`,
             {
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }
 
     /**
      * 
      * Get all questions available in game
      * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
      * @param reportProgress flag to report request and response progress.
      */
     public getAllQuestions(observe?: 'body', reportProgress?: boolean): Observable<Array<QuestionFull>>;
     public getAllQuestions(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<QuestionFull>>>;
     public getAllQuestions(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<QuestionFull>>>;
     public getAllQuestions(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
 
         let headers = this.defaultHeaders;
         headers = headers.append('Authorization', localStorage.getItem('adminPass'));
         
 
         return this.httpClient.request<Array<QuestionFull>>('get',`${environment.serverBaseURL}/api/admin/question`,
             {
                 headers: headers,
                 observe: observe,
                 reportProgress: reportProgress
             }
         );
     }

}
